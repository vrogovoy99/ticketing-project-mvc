BINDING DTO WITH HTML

1. create new object in controller:
     model.addAttribute("user", new UserDTO());
2. bind object in html
    2.1. <form action="#" th:object="${user}">
    2.2. <input id="firstname" type="text" th:field="*{firstName}">
    2.3. <input type="radio" th:field="*{gender}" th:value="Male"><span>Male</span>
    2.4.  <select name="role" th:field="*{role}">
                 <option th:each="role : ${roles}"  th:text="${role.name}"></option>

USING GENETICS TO DEFINE INTERFACES

1. use generic to create CrudService to define all common functions for project classes: save, find, delete...
    public interface CrudService<T,ID> {
        T save(T object);
        T findById(ID id);
        List<T> findAll();
        void delete(T object);
        void deleteById(ID id);
    }
2. Extend CrudeService in project interfaces to save on coding:
    public interface RoleService extends CrudService<RoleDTO, Long>{} //this interface will already have save, findBy, findAll... methods but with class specific object definitions

3. create abstract map service to implement CrudService methods in generic format.

4. create each dto class service implementation extending AbstractMapService and implementing specific class Service Interfaces

DATA INITIATION

Class DataGenerator implements CommandLineRunner - to load initial app data at the start of the application.